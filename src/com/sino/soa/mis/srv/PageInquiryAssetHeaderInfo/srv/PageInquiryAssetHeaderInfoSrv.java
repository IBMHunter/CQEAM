package com.sino.soa.mis.srv.PageInquiryAssetHeaderInfo.srv;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import com.sino.base.dto.DTOSet;
import com.sino.base.exception.CalendarException;
import com.sino.base.util.StrUtil;
import com.sino.soa.common.SrvReturnMessage;
import com.sino.soa.mis.srv.PageInquiryAssetHeaderInfo.dto.InquiryAssetHeaderInfoSrvDTO;
import com.sino.soa.util.XMLGregorianCalendarUtil;
import com.sino.soa.mis.eip.fi.fa.sb_fi_fa_pageinquiryassetheaderinfosrv.SBFIFAPageInquiryAssetHeaderInfoSrv;
import com.sino.soa.mis.eip.fi.fa.sb_fi_fa_pageinquiryassetheaderinfosrv.SBFIFAPageInquiryAssetHeaderInfoSrv_Service;
import com.sino.soa.mis.eip.fi.fa.sb_fi_fa_pageinquiryassetheaderinfosrv.PageInquiryAssetHeaderInfoSrvOutputItem;
import com.sino.soa.mis.eip.fi.fa.sb_fi_fa_pageinquiryassetheaderinfosrv.PageInquiryAssetHeaderInfoSrvRequest;
import com.sino.soa.mis.eip.fi.fa.sb_fi_fa_pageinquiryassetheaderinfosrv.PageInquiryAssetHeaderInfoSrvResponse;
import com.sino.soa.mis.eip.fi.fa.sb_fi_fa_pageinquiryassetheaderinfosrv.msgheader.MsgHeader;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;

import org.apache.cxf.endpoint.Client;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.transport.http.HTTPConduit;
import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;

import java.math.BigDecimal;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * This class was generated by Apache CXF 2.1.4
 * Tue May 05 09:21:39 CST 2009
 * Generated source version: 2.1.4
 * function:查询资产头基本信息（分页）
 */

public final class PageInquiryAssetHeaderInfoSrv {
    private SrvReturnMessage returnMessage = new SrvReturnMessage();
    private DTOSet ds = new DTOSet();
    private String bookTypeCode = "";        //资产账簿
    private String tagNumber = "";           //资产标签号
    private String startLastUpdateDate = ""; //最后更新开始时间
    private String endLastUpdateDate = "";   //最后更新结束时间
    
    private static final QName SERVICE_NAME = new QName("http://eip.zte.com/fi/SB_FI_FA_PageInquiryAssetHeaderInfoSrv", "SB_FI_FA_PageInquiryAssetHeaderInfoSrv");

    public PageInquiryAssetHeaderInfoSrv() throws DatatypeConfigurationException {

    }

    public void excute() throws Exception {
        URL wsdlURL = SBFIFAPageInquiryAssetHeaderInfoSrv_Service.WSDL_LOCATION;
        SBFIFAPageInquiryAssetHeaderInfoSrv_Service ss = new SBFIFAPageInquiryAssetHeaderInfoSrv_Service(wsdlURL, SERVICE_NAME);
        SBFIFAPageInquiryAssetHeaderInfoSrv port = ss.getSBFIFAPageInquiryAssetHeaderInfoSrvPort();
	        Client client = ClientProxy.getClient(port);
	        HTTPConduit http = (HTTPConduit) client.getConduit();
	        HTTPClientPolicy httpClientPolicy = new HTTPClientPolicy();
	        httpClientPolicy.setConnectionTimeout(5400000);//连接时间
	        httpClientPolicy.setReceiveTimeout(5400000);//接收时间
	        httpClientPolicy.setAllowChunking(false);
	        http.setClient(httpClientPolicy);
        {
            System.out.println("PageInquiryRetiredAssetDetailSrv Invoking process...");
            PageInquiryAssetHeaderInfoSrvRequest _process_payload = null;
             MsgHeader msgHeader = new MsgHeader();
	            msgHeader.setSOURCESYSTEMID("EAM");
	            msgHeader.setSOURCESYSTEMNAME("EAM");
	            msgHeader.setUSERID("IBM");
	            msgHeader.setUSERNAME("IBM");
	            msgHeader.setPAGESIZE(new BigDecimal(1000));
	            msgHeader.setCURRENTPAGE(new BigDecimal(1));
	            msgHeader.setTOTALRECORD(new BigDecimal(-1));
	            _process_payload = new PageInquiryAssetHeaderInfoSrvRequest();
	            _process_payload.setBOOKTYPECODE(this.bookTypeCode);
	            _process_payload.setTAGNUMBER(this.tagNumber);
	            _process_payload.setSTARTLASTUPDATEDATE(XMLGregorianCalendarUtil.getXMLGregorianCalendar(startLastUpdateDate));
	            _process_payload.setENDLASTUPDATEDATE(XMLGregorianCalendarUtil.getXMLGregorianCalendar(endLastUpdateDate));
                _process_payload.setMsgHeader(msgHeader);
                PageInquiryAssetHeaderInfoSrvResponse _process__return = port.process(_process_payload);
            returnMessage.setErrorFlag(StrUtil.nullToString(_process__return.getErrorFlag()));
            returnMessage.setErrorMessage(_process__return.getErrorMessage());
            System.out.println("总记录数="+_process__return.getTOTALRECORD()+" 总页数:"+_process__return.getTOTALPAGE()+" 每页记录数="+_process__return.getPAGESIZE());
        if (returnMessage.getErrorFlag().equalsIgnoreCase("Y")) {
            BigDecimal totalRecord = _process__return.getTOTALRECORD();
            BigDecimal pageSize = new BigDecimal(1000);
            int totalPage = _process__return.getTOTALPAGE().intValue();
            for (int i = 1; i < totalPage + 1; i++) {
                msgHeader = new MsgHeader();
	            msgHeader.setSOURCESYSTEMID("EAM");
	            msgHeader.setSOURCESYSTEMNAME("EAM");
	            msgHeader.setUSERID("IBM");
	            msgHeader.setUSERNAME("IBM");
                msgHeader.setPAGESIZE(pageSize);
                msgHeader.setTOTALRECORD(totalRecord);
                msgHeader.setCURRENTPAGE(new BigDecimal(i));
                _process_payload = new PageInquiryAssetHeaderInfoSrvRequest();
	            _process_payload.setBOOKTYPECODE(this.bookTypeCode);
	            _process_payload.setTAGNUMBER(this.tagNumber);
	            _process_payload.setSTARTLASTUPDATEDATE(XMLGregorianCalendarUtil.getXMLGregorianCalendar(startLastUpdateDate));
	            _process_payload.setENDLASTUPDATEDATE(XMLGregorianCalendarUtil.getXMLGregorianCalendar(endLastUpdateDate));
                _process_payload.setMsgHeader(msgHeader);
                _process__return = port.process(_process_payload);       
            if (_process__return.getErrorFlag().equalsIgnoreCase("Y")) {	
               List<PageInquiryAssetHeaderInfoSrvOutputItem> items = _process__return.getPageInquiryAssetHeaderInfoSrvOutputCollection().getPageInquiryAssetHeaderInfoSrvOutputItem();
                for (int k = 0; k < items.size(); k++) {
                	PageInquiryAssetHeaderInfoSrvOutputItem item = items.get(k);
                	InquiryAssetHeaderInfoSrvDTO HeaderInfo = new InquiryAssetHeaderInfoSrvDTO();
                	HeaderInfo.setBookTypeCode(item.getBOOKTYPECODE());   //资产账簿
                    if (item.getASSETID() != null){
                    	HeaderInfo.setAssetId(item.getASSETID().toString());      //资产ID 
                     }   
                    HeaderInfo.setAssetNumber(item.getASSETNUMBER());     //资产编号
                    HeaderInfo.setTagNumber(item.getTAGNUMBER());         //资产标签号
                    HeaderInfo.setDatePlacedInService(StrUtil.nullToString(item.getDATEPLACEDINSERVICE())); //资产投入使用日期
                    HeaderInfo.setLifeInMonth(item.getLIFEINMONTH().toString());  //资产可使用寿命
                    HeaderInfo.setDeprnMethod(item.getDEPRNMETHOD()); //资产折旧方法
                    HeaderInfo.setDepreciateFlag(item.getDEPRECIATEFLAG());   //是否计提折旧
                    HeaderInfo.setFixedAssetsCost(StrUtil.nullToString(item.getFIXEDASSETSCOST()));    //资产原值
                    HeaderInfo.setDeprnReserve(StrUtil.nullToString(item.getDEPRNRESERVE()));          //累计折旧
                    HeaderInfo.setSalvageValue(StrUtil.nullToString(item.getSALVAGEVALUE()));          //资产预计净残值
                    HeaderInfo.setImpairmentReserve(StrUtil.nullToString(item.getIMPAIRMENTRESERVE() ));  //资产减值准备
                    HeaderInfo.setDescription(StrUtil.nullToString(item.getDESCRIPTION()));              //资产名称
                    HeaderInfo.setManufacturerName(StrUtil.nullToString(item.getMANUFACTURERNAME()));    //制造商
                    HeaderInfo.setModelNumber(StrUtil.nullToString(item.getMODELNUMBER()));              //规格型号
                    HeaderInfo.setSerialNumber(item.getSERIALNUMBER());            //序列号
                    HeaderInfo.setInUseFlag( item.getINUSEFLAG());                  //资产使用状态
                    HeaderInfo.setInventorial(item.getINVENTORIAL());              //是否实际在库
                    HeaderInfo.setAssetSourceId(item.getASSETSOURCEID());          //资产来源保唯一标识
                    HeaderInfo.setProjectNumber(item.getPROJECTNUMBER());          //资产项目编号
                    HeaderInfo.setConstructionStatus(item.getCONSTRUCTIONSTATUS());  //建设状态
                    HeaderInfo.setCategoryConSeg(item.getCATEGORYCONSEG());         //资产类别组合代码
                    HeaderInfo.setCategoryDescription(item.getCATEGORYDESCRIPTION() );  //类别描述
                    HeaderInfo.setAssetKey(item.getASSETKEY() );                       //资产关键字组合
                    HeaderInfo.setAssetKeyDesc(item.getASSETKEYDESC());
                    HeaderInfo.setCreationDate(StrUtil.nullToString(item.getCREATIONDATE()));
                    HeaderInfo.setFixedAssetsUnit(StrUtil.nullToString(item.getFIXEDASSETSUNIT()));
                    HeaderInfo.setRetirementFlag(item.getRETIREMENTFLAG());
                    HeaderInfo.setLastUpdateDate(StrUtil.nullToString(item.getLASTUPDATEDATE())); 
                    ds.addDTO(HeaderInfo);
                }
              }
            }
          }
        }
    }
    
    public String toString() {
        String s = null;
        for (int i = 0; i < ds.getSize(); i++) {
        	InquiryAssetHeaderInfoSrvDTO dto = (InquiryAssetHeaderInfoSrvDTO) ds.getDTO(i);
            s = s + "资产账簿:" + dto.getBookTypeCode() + "  资产ID:" + dto.getAssetId() + " 资产标签号:" + dto.getTagNumber()+"--- "+dto.getDescription()+"---"+dto.getModelNumber()+"---"+dto.getDatePlacedInService() +"\n";
        }
        return s;
    } 
    
    public static void main(String[] args) throws Exception {
        PageInquiryAssetHeaderInfoSrv srv = new PageInquiryAssetHeaderInfoSrv();
         srv.setBookTypeCode("SXMC_FA_4110");  //资产账簿名称SXMC_FA_4187
         srv.setTagNumber("4110-10001426");    //资产标签号 4187-00000002
//         srv.setStartLastUpdateDate("2011-05-18");       //2004-06-11
//         srv.setEndLastUpdateDate("2011-05-20");  //2004-07-11
        srv.excute();
        System.out.println(srv.toString());
        //System.exit(0);
    }

    /**
     * @return the returnMessage
     */
    public SrvReturnMessage getReturnMessage() {
        return returnMessage;
    }

    /**
     * @param returnMessage the returnMessage to set
     */
    public void setReturnMessage(SrvReturnMessage returnMessage) {
        this.returnMessage = returnMessage;
    }

    /**
     * @return the ds
     */
    public DTOSet getDs() {
        return ds;
    }

    /**
     * @param ds the ds to set
     */
    public void setDs(DTOSet ds) {
        this.ds = ds;
    }

    /**
     * @return the bookTypeCode
     */
    public String getBookTypeCode() {
        return bookTypeCode;
    }

    /**
     * @param bookTypeCode the bookTypeCode to set
     */
    public void setBookTypeCode(String bookTypeCode) {
        this.bookTypeCode = bookTypeCode;
    }

	public String getTagNumber() {
		return tagNumber;
	}

	public void setTagNumber(String tagNumber) {
		this.tagNumber = tagNumber;
	}

	public String getStartLastUpdateDate() {
		return startLastUpdateDate;
	}

	public void setStartLastUpdateDate(String startLastUpdateDate) {
		this.startLastUpdateDate = startLastUpdateDate;
	}

	public String getEndLastUpdateDate() {
		return endLastUpdateDate;
	}

	public void setEndLastUpdateDate(String endLastUpdateDate) {
		this.endLastUpdateDate = endLastUpdateDate;
	}

}