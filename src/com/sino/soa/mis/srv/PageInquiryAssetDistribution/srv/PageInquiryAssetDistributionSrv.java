package com.sino.soa.mis.srv.PageInquiryAssetDistribution.srv;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import com.sino.base.dto.DTOSet;
import com.sino.base.exception.CalendarException;
import com.sino.base.util.StrUtil;
import com.sino.soa.common.SrvReturnMessage;
import com.sino.soa.mis.srv.PageInquiryAssetDistribution.dto.InquiryAssetDistributionDTO;  //
import com.sino.soa.util.XMLGregorianCalendarUtil;
import com.sino.soa.mis.eip.fi.fa.sb_fi_fa_pageinquiryassetdistributionsrv.SBFIFAPageInquiryAssetDistributionSrv;   
import com.sino.soa.mis.eip.fi.fa.sb_fi_fa_pageinquiryassetdistributionsrv.SBFIFAPageInquiryAssetDistributionSrv_Service; 
import com.sino.soa.mis.eip.fi.fa.sb_fi_fa_pageinquiryassetdistributionsrv.PageInquiryAssetDistributionSrvOutputItem; 
import com.sino.soa.mis.eip.fi.fa.sb_fi_fa_pageinquiryassetdistributionsrv.PageInquiryAssetDistributionSrvRequest; 
import com.sino.soa.mis.eip.fi.fa.sb_fi_fa_pageinquiryassetdistributionsrv.PageInquiryAssetDistributionSrvResponse; 
import com.sino.soa.mis.eip.fi.fa.sb_fi_fa_pageinquiryassetdistributionsrv.msgheader.MsgHeader;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;

import org.apache.cxf.endpoint.Client;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.transport.http.HTTPConduit;
import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;

import java.math.BigDecimal;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * This class was generated by Apache CXF 2.1.4
 * Tue May 05 09:21:39 CST 2009
 * Generated source version: 2.1.4
 * function:查询资产分配行信息（分页）
 */

public final class PageInquiryAssetDistributionSrv {
    private SrvReturnMessage returnMessage = new SrvReturnMessage();
    private DTOSet ds = new DTOSet();
    private String bookTypeCode = "";          //资产账簿
    private String assetNumber = "";           //资产编号  ASSET_NUMBER
    private String startLastUpdateDate = "";   //最后更新开始时间
    private String endLastUpdateDate = "";     //最后更新结束时间
    
    private static final QName SERVICE_NAME = new QName("http://eip.zte.com/SB_FI_FA_PageInquiryAssetDistributionSrv", "SB_FI_FA_PageInquiryAssetDistributionSrv");

    public PageInquiryAssetDistributionSrv() throws DatatypeConfigurationException {
    }

    public void excute() throws Exception {
        URL wsdlURL = SBFIFAPageInquiryAssetDistributionSrv_Service.WSDL_LOCATION;
        SBFIFAPageInquiryAssetDistributionSrv_Service ss = new SBFIFAPageInquiryAssetDistributionSrv_Service(wsdlURL, SERVICE_NAME);
        SBFIFAPageInquiryAssetDistributionSrv port = ss.getSBFIFAPageInquiryAssetDistributionSrvPort();   
	        Client client = ClientProxy.getClient(port);
	        HTTPConduit http = (HTTPConduit) client.getConduit();
	        HTTPClientPolicy httpClientPolicy = new HTTPClientPolicy();
	        httpClientPolicy.setConnectionTimeout(5400000);//连接时间
	        httpClientPolicy.setReceiveTimeout(5400000);//接收时间
	        httpClientPolicy.setAllowChunking(false);
	        http.setClient(httpClientPolicy);
        
        {
            System.out.println("PageInquiryAssetDistributionSrv Invoking process...");
            PageInquiryAssetDistributionSrvRequest _process_payload = null;
             MsgHeader msgHeader = new MsgHeader();
	            msgHeader.setSOURCESYSTEMID("EAM");
	            msgHeader.setSOURCESYSTEMNAME("EAM");
	            msgHeader.setUSERID("IBM");
	            msgHeader.setUSERNAME("IBM");
	            msgHeader.setPAGESIZE(new BigDecimal(1000));
	            msgHeader.setCURRENTPAGE(new BigDecimal(1));
	            msgHeader.setTOTALRECORD(new BigDecimal(-1));
	            _process_payload = new PageInquiryAssetDistributionSrvRequest();
	            _process_payload.setBOOKTYPECODE(this.bookTypeCode);
	            _process_payload.setASSETNUMBER(this.assetNumber);
	            _process_payload.setSTARTLASTUPDATEDATE(XMLGregorianCalendarUtil.getXMLGregorianCalendar(startLastUpdateDate));
	            _process_payload.setENDLASTUPDATEDATE(XMLGregorianCalendarUtil.getXMLGregorianCalendar(endLastUpdateDate));
                _process_payload.setMsgHeader(msgHeader);
                PageInquiryAssetDistributionSrvResponse _process__return = port.process(_process_payload);
            returnMessage.setErrorFlag(StrUtil.nullToString(_process__return.getErrorFlag()));
            returnMessage.setErrorMessage(_process__return.getErrorMessage());
            System.out.println("总记录数="+_process__return.getTOTALRECORD()+" 总页数:"+_process__return.getTOTALPAGE()+" 每页记录数="+_process__return.getPAGESIZE());
        if (returnMessage.getErrorFlag().equalsIgnoreCase("Y")) {
            BigDecimal totalRecord = _process__return.getTOTALRECORD();
            BigDecimal pageSize = new BigDecimal(1000);
            int totalPage = _process__return.getTOTALPAGE().intValue();
            for (int i = 1; i < totalPage + 1; i++) {
                msgHeader = new MsgHeader();
	            msgHeader.setSOURCESYSTEMID("EAM");
	            msgHeader.setSOURCESYSTEMNAME("EAM");
	            msgHeader.setUSERID("IBM");
	            msgHeader.setUSERNAME("IBM");
                msgHeader.setPAGESIZE(pageSize);
                msgHeader.setTOTALRECORD(totalRecord);
                msgHeader.setCURRENTPAGE(new BigDecimal(i));
                _process_payload = new PageInquiryAssetDistributionSrvRequest();
	            _process_payload.setBOOKTYPECODE(this.bookTypeCode);
	            _process_payload.setASSETNUMBER(this.assetNumber);
	            _process_payload.setSTARTLASTUPDATEDATE(XMLGregorianCalendarUtil.getXMLGregorianCalendar(startLastUpdateDate));
	            _process_payload.setENDLASTUPDATEDATE(XMLGregorianCalendarUtil.getXMLGregorianCalendar(endLastUpdateDate));
                _process_payload.setMsgHeader(msgHeader);
                _process__return = port.process(_process_payload);       
            if (_process__return.getErrorFlag().equalsIgnoreCase("Y")) {	
               List<PageInquiryAssetDistributionSrvOutputItem> items = _process__return.getPageInquiryAssetDistributionSrvOutputCollection().getPageInquiryAssetDistributionSrvOutputItem(); 
               //System.out.println("输出数量="+items.size()); 
               for (int k = 0; k < items.size(); k++) {
                	PageInquiryAssetDistributionSrvOutputItem item = items.get(k);
                	InquiryAssetDistributionDTO HeaderInfo = new InquiryAssetDistributionDTO();
                	HeaderInfo.setAssetId(StrUtil.nullToString(item.getASSETID()));
                	HeaderInfo.setDistributionId(StrUtil.nullToString(item.getDISTRIBUTIONID()));
                	HeaderInfo.setLastUpdateDate(StrUtil.nullToString(item.getLASTUPDATEDATE()));
                	HeaderInfo.setDepartment(item.getDEPARTMENT());
                	HeaderInfo.setLocation(item.getLOCATION());
                	HeaderInfo.setStatus(item.getSTATUS());
                	HeaderInfo.setLocationId(item.getLOCATIONID());
                	HeaderInfo.setCodeCombination(item.getCODECOMBINATION());
                	HeaderInfo.setDistributionUnit(StrUtil.nullToString(item.getDISTRIBUTIONUNIT()));
                	HeaderInfo.setAssignedName(StrUtil.nullToString(item.getASSIGNEDNAME()));
                	HeaderInfo.setAssignedTo(StrUtil.nullToString(item.getASSIGNEDTO()));
                	HeaderInfo.setAssignedNumber(StrUtil.nullToString(item.getASSIGNEDNUMBER()));
                	HeaderInfo.setExpenseCodeCombinationId(StrUtil.nullToString(item.getEXPENSECODECOMBINATIONID()));
                    ds.addDTO(HeaderInfo);
                }
              }
            }
          }
        }
    }
    
    public String toString() {
        String s = null;
        for (int i = 0; i < ds.getSize(); i++) {
        	InquiryAssetDistributionDTO dto = (InquiryAssetDistributionDTO) ds.getDTO(i);
            s = s + "资产账簿:" + dto.getBookTypeCode() + "  资产ID:" + dto.getAssetId() + " 资产所在地点:" + dto.getLocation()+" 费用科目组合:"+dto.getCodeCombination()+"\n";
        }
        return s;
    } 
    
    public static void main(String[] args) throws Exception {
        PageInquiryAssetDistributionSrv srv = new PageInquiryAssetDistributionSrv();
         srv.setBookTypeCode("SXMC_FA_4187");  //资产账簿名称
          srv.setAssetNumber("");    //资产标签号 4187-00000002
          srv.setStartLastUpdateDate("");           //2008-02-03
          srv.setEndLastUpdateDate("");             //2008-02-03
        srv.excute();
        System.out.println(srv.toString());
        //System.exit(0);
    }

    /**
     * @return the returnMessage
     */
    public SrvReturnMessage getReturnMessage() {
        return returnMessage;
    }

    /**
     * @param returnMessage the returnMessage to set
     */
    public void setReturnMessage(SrvReturnMessage returnMessage) {
        this.returnMessage = returnMessage;
    }

    /**
     * @return the ds
     */
    public DTOSet getDs() {
        return ds;
    }

    /**
     * @param ds the ds to set
     */
    public void setDs(DTOSet ds) {
        this.ds = ds;
    }

    /**
     * @return the bookTypeCode
     */
    public String getBookTypeCode() {
        return bookTypeCode;
    }

    /**
     * @param bookTypeCode the bookTypeCode to set
     */
    public void setBookTypeCode(String bookTypeCode) {
        this.bookTypeCode = bookTypeCode;
    }

	public String getAssetNumber() {
		return assetNumber;
	}

	public void setAssetNumber(String assetNumber) {
		this.assetNumber = assetNumber;
	}

	public String getStartLastUpdateDate() {
		return startLastUpdateDate;
	}

	public void setStartLastUpdateDate(String startLastUpdateDate) {
		this.startLastUpdateDate = startLastUpdateDate;
	}

	public String getEndLastUpdateDate() {
		return endLastUpdateDate;
	}

	public void setEndLastUpdateDate(String endLastUpdateDate) {
		this.endLastUpdateDate = endLastUpdateDate;
	}

}