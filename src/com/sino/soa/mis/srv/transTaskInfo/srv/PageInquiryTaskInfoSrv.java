package com.sino.soa.mis.srv.transTaskInfo.srv;

import com.sino.base.dto.DTOSet;
import com.sino.base.exception.CalendarException;
import com.sino.base.exception.DTOException;
import com.sino.base.util.StrUtil;
import com.sino.soa.common.SrvReturnMessage;
import com.sino.soa.mis.srv.transTaskInfo.dto.PageInquiryTaskinfoDTO;   //SrvTaskinfoDTO;
import com.sino.soa.util.XMLGregorianCalendarUtil;
import com.sino.soa.mis.eip.fi.fa.sb_fi_fa_pageinquiryassetdistributionsrv.PageInquiryAssetDistributionSrvRequest;
import com.sino.soa.mis.eip.sc.pa.sb_sc_pa_pageinquirytaskinfosrv.msgheader.MsgHeader;
import com.sino.soa.mis.eip.sc.pa.sb_sc_pa_pageinquirytaskinfosrv.SBSCPAPageInquiryTaskInfoSrv;
import com.sino.soa.mis.eip.sc.pa.sb_sc_pa_pageinquirytaskinfosrv.SBSCPAPageInquiryTaskInfoSrv_Service;
import com.sino.soa.mis.eip.sc.pa.sb_sc_pa_pageinquirytaskinfosrv.PageInquiryTaskInfoSrvRequest;
import com.sino.soa.mis.eip.sc.pa.sb_sc_pa_pageinquirytaskinfosrv.PageInquiryTaskInfoSrvResponse;
import com.sino.soa.mis.eip.sc.pa.sb_sc_pa_pageinquirytaskinfosrv.PageInquiryTaskInfoSrvOutputItem;
import javax.xml.namespace.QName;

import org.apache.cxf.endpoint.Client;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.transport.http.HTTPConduit;
import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;

import java.math.BigDecimal;
import java.net.URL;
import java.util.List;

/**
 * This class was generated by Apache CXF 2.1.4
 * Fri May 08 10:04:45 GMT 2009
 * Generated source version: 2.1.4
 * 查询项目任务信息服务(分页) 
 */

public final class PageInquiryTaskInfoSrv {

    private SrvReturnMessage returnMessage = new SrvReturnMessage();
    private DTOSet ds = new DTOSet();
    private String projectNum = "";  //项目编号
    private String taskNum = "";     //任务编号
    private static final QName SERVICE_NAME = new QName("http://eip.zte.com/SC/SB_SC_PA_PageInquiryTaskInfoSrv", "SB_SC_PA_PageInquiryTaskInfoSrv");
    public PageInquiryTaskInfoSrv() {

    }
    public void excute() throws CalendarException, DTOException {
        URL wsdlURL = SBSCPAPageInquiryTaskInfoSrv_Service.WSDL_LOCATION;
        SBSCPAPageInquiryTaskInfoSrv_Service ss = new SBSCPAPageInquiryTaskInfoSrv_Service(wsdlURL, SERVICE_NAME);
        SBSCPAPageInquiryTaskInfoSrv port = ss.getSBSCPAPageInquiryTaskInfoSrvPort();
	        Client client = ClientProxy.getClient(port);
	        HTTPConduit http = (HTTPConduit) client.getConduit();
	        HTTPClientPolicy httpClientPolicy = new HTTPClientPolicy();
	        httpClientPolicy.setConnectionTimeout(5400000);//连接时间
	        httpClientPolicy.setReceiveTimeout(5400000);//接收时间
	        httpClientPolicy.setAllowChunking(false);
	        http.setClient(httpClientPolicy);
        {
            System.out.println("SB_SC_PA_PageInquiryTaskInfoSrv Invoking process...");
            PageInquiryTaskInfoSrvRequest _process_payload = null;
            _process_payload = new PageInquiryTaskInfoSrvRequest();
	            MsgHeader msgHeader = new MsgHeader();
	            msgHeader.setSOURCESYSTEMID("EAM");
	            msgHeader.setSOURCESYSTEMNAME("EAM");
	            msgHeader.setUSERID("IBM");
	            msgHeader.setUSERNAME("IBM");
	            msgHeader.setPAGESIZE(new BigDecimal(1000));
	            msgHeader.setCURRENTPAGE(new BigDecimal(1));
	            msgHeader.setTOTALRECORD(new BigDecimal(-1));
	            //msgHeader.setPROVINCECODE("40");
	            //msgHeader.setENVIRONMENTNAME("");
	            _process_payload.setPROJECTNUM(projectNum);
	            _process_payload.setTASKNUM(taskNum);
	            _process_payload.setMsgHeader(msgHeader);
              PageInquiryTaskInfoSrvResponse _process__return = port.process(_process_payload);
              returnMessage.setErrorFlag(StrUtil.nullToString(_process__return.getErrorFlag()));
              returnMessage.setErrorMessage(_process__return.getErrorMessage());
              System.out.println("总记录数="+_process__return.getTOTALRECORD()+" 总页数:"+_process__return.getTOTALPAGE()+" 每页记录数="+_process__return.getPAGESIZE());
              if (returnMessage.getErrorFlag().equalsIgnoreCase("Y")) {
                BigDecimal totalRecord = _process__return.getTOTALRECORD();
                BigDecimal pageSize = new BigDecimal(1000);
                int totalPage = _process__return.getTOTALPAGE().intValue();
                for (int i = 1; i < totalPage + 1; i++) {
                    msgHeader = new MsgHeader();
    	            msgHeader.setSOURCESYSTEMID("EAM");
    	            msgHeader.setSOURCESYSTEMNAME("EAM");
    	            msgHeader.setUSERID("IBM");
    	            msgHeader.setUSERNAME("IBM");
                    msgHeader.setPAGESIZE(pageSize);
                    msgHeader.setTOTALRECORD(totalRecord);
                    msgHeader.setCURRENTPAGE(new BigDecimal(i));
                    _process_payload.setPROJECTNUM(projectNum);
                    _process_payload.setTASKNUM(taskNum);
                    _process_payload.setMsgHeader(msgHeader);
                    _process__return = port.process(_process_payload);       
            
            if (_process__return.getErrorFlag().equalsIgnoreCase("Y")) {
                List<PageInquiryTaskInfoSrvOutputItem> items = _process__return.getPageInquiryTaskInfoSrvOutputColection().getPageInquiryTaskInfoSrvOutputItem();
                //System.out.println("------------------" + items.size());
                for (int k = 0; k < items.size(); k++) {              	                	
                	PageInquiryTaskinfoDTO taskInfoDto = new PageInquiryTaskinfoDTO();
                    PageInquiryTaskInfoSrvOutputItem item = items.get(k);
                    taskInfoDto.setOrgId(item.getORGID().toString());          //任务所属组织 ID
                    taskInfoDto.setOrgName(item.getORGNAME());                 //任务所属组织 名称
                    taskInfoDto.setDescription(item.getDESCRIPTION());         //描述
                    taskInfoDto.setProjectId(item.getPROJECTID().toString());  //项目ID
                    taskInfoDto.setSegment1(item.getSEGMENT1());               //项目编号
                    taskInfoDto.setTaskId(item.getTASKID().toString());        //任务ID
                    taskInfoDto.setTaskNumber(item.getTASKNUMBER());          
                    taskInfoDto.setTaskName(item.getTASKNAME());
                    taskInfoDto.setTaskManager(item.getTASKMANAGER());         //任务经理
                    taskInfoDto.setWbsLevel(StrUtil.nullToString(item.getWBSLEVEL()));               //层次
                    taskInfoDto.setParentTaskId(StrUtil.nullToString(item.getPARENTTASKID()));       //父级任务ID 
                    taskInfoDto.setParentTaskNum(item.getPARENTTASKNUM());
                    taskInfoDto.setStartDate(XMLGregorianCalendarUtil.getSimpleCalendarString(item.getSTARTDATE()));
                    taskInfoDto.setCompletionDate(XMLGregorianCalendarUtil.getSimpleCalendarString(item.getCOMPLETIONDATE()));
                    taskInfoDto.setServiceTypeCode(item.getSERVICETYPECODE());
                    taskInfoDto.setChargeableFlag(item.getCHARGEABLEFLAG());
                    taskInfoDto.setBillableFlag(item.getBILLABLEFLAG());
                    taskInfoDto.setCostFlag(item.getCOSTFLAG());
                    taskInfoDto.setAttribute1(item.getATTRIBUTE1());   //部门
                    taskInfoDto.setAttribute2(item.getATTRIBUTE2());   //地点
                    taskInfoDto.setAttribute3(item.getATTRIBUTE3());   //备注
                    taskInfoDto.setAttribute4(item.getATTRIBUTE4());   //其他信息
                    taskInfoDto.setAttribute5(item.getATTRIBUTE5());   //其他信息
                    taskInfoDto.setAttribute6(item.getATTRIBUTE6());   //其他信息
                    taskInfoDto.setPmProductCode(item.getPMPRODUCTCODE());   //PM产品来源
                    taskInfoDto.setPmTaskReference(item.getPMTASKREFERENCE()); //PM来源参考
                    taskInfoDto.setCreationDate(XMLGregorianCalendarUtil.getSimpleCalendarString(item.getCREATIONDATE()));
                    taskInfoDto.setLastUpdateDate(XMLGregorianCalendarUtil.getSimpleCalendarString(item.getLASTUPDATEDATE()));
                    ds.addDTO(taskInfoDto);
                }
              }
            }
           }
        }
    }
 
    public String toString() {
        String s = null;
        for (int i = 0; i < ds.getSize(); i++) {
        	PageInquiryTaskinfoDTO dto = (PageInquiryTaskinfoDTO) ds.getDTO(i);
            s = s + "项目编号:" + dto.getSegment1() + "  任务名称:" + dto.getTaskName() + " 任务编号:" + dto.getTaskNumber() +" 描述:"+ dto.getDescription()  +"\n";
       
        }
        return s;
    } 
    
    public static void main(String args[]) throws CalendarException, DTOException {
        PageInquiryTaskInfoSrv srv = new PageInquiryTaskInfoSrv();
        srv.setProjectNum("T-B41001");  //
        //srv.setTaskNum("10");
        srv.excute();
        System.out.println(" " + srv.toString());
    }
    
    
    public DTOSet getDs() {
        return ds;
    }

    public void setDs(DTOSet ds) {
        this.ds = ds;
    }

    public SrvReturnMessage getReturnMessage() {
        return returnMessage;
    }

    public void setReturnMessage(SrvReturnMessage returnMessage) {
        this.returnMessage = returnMessage;
    }

    public String getProjectNum() {
        return projectNum;
    }

    public void setProjectNum(String projectNum) {
        this.projectNum = projectNum;
    }

    public String getTaskNum() {
        return taskNum;
    }

    public void setTaskNum(String taskNum) {
        this.taskNum = taskNum;
    }
 
    
    
    
    
    
    
}

